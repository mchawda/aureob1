/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface FeeRouterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "FEE_DENOMINATOR"
      | "baseFeeRate"
      | "calculateFee"
      | "collectedFees"
      | "getCollectedFees"
      | "getTotalFeesPaid"
      | "getUserFeeRate"
      | "getUserFeesPaid"
      | "onTransfer"
      | "owner"
      | "setBaseFeeRate"
      | "setTierFeeRate"
      | "setTreasury"
      | "setUserTier"
      | "tierFeeRates"
      | "treasury"
      | "userFeesPaid"
      | "userTiers"
      | "withdrawFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FeeCollected"
      | "FeeRateUpdated"
      | "TreasuryUpdated"
      | "UserTierUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseFeeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateFee",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectedFees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectedFees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalFeesPaid",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserFeeRate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserFeesPaid",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onTransfer",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBaseFeeRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTierFeeRate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasury",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserTier",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tierFeeRates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userFeesPaid",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userTiers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectedFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectedFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalFeesPaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserFeesPaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "onTransfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBaseFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTierFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tierFeeRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userFeesPaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userTiers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
}

export namespace FeeCollectedEvent {
  export type InputTuple = [
    asset: AddressLike,
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    feeAmount: BigNumberish
  ];
  export type OutputTuple = [
    asset: string,
    from: string,
    to: string,
    amount: bigint,
    feeAmount: bigint
  ];
  export interface OutputObject {
    asset: string;
    from: string;
    to: string;
    amount: bigint;
    feeAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeRateUpdatedEvent {
  export type InputTuple = [newRate: BigNumberish];
  export type OutputTuple = [newRate: bigint];
  export interface OutputObject {
    newRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasuryUpdatedEvent {
  export type InputTuple = [newTreasury: AddressLike];
  export type OutputTuple = [newTreasury: string];
  export interface OutputObject {
    newTreasury: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserTierUpdatedEvent {
  export type InputTuple = [user: AddressLike, tier: BigNumberish];
  export type OutputTuple = [user: string, tier: bigint];
  export interface OutputObject {
    user: string;
    tier: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FeeRouter extends BaseContract {
  connect(runner?: ContractRunner | null): FeeRouter;
  waitForDeployment(): Promise<this>;

  interface: FeeRouterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  FEE_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  baseFeeRate: TypedContractMethod<[], [bigint], "view">;

  calculateFee: TypedContractMethod<
    [user: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;

  collectedFees: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getCollectedFees: TypedContractMethod<[asset: AddressLike], [bigint], "view">;

  getTotalFeesPaid: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getUserFeeRate: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getUserFeesPaid: TypedContractMethod<
    [asset: AddressLike, user: AddressLike],
    [bigint],
    "view"
  >;

  onTransfer: TypedContractMethod<
    [
      asset: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  setBaseFeeRate: TypedContractMethod<
    [newRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTierFeeRate: TypedContractMethod<
    [tier: BigNumberish, rate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTreasury: TypedContractMethod<
    [_treasury: AddressLike],
    [void],
    "nonpayable"
  >;

  setUserTier: TypedContractMethod<
    [user: AddressLike, tier: BigNumberish],
    [void],
    "nonpayable"
  >;

  tierFeeRates: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  treasury: TypedContractMethod<[], [string], "view">;

  userFeesPaid: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  userTiers: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  withdrawFees: TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "FEE_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseFeeRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateFee"
  ): TypedContractMethod<
    [user: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "collectedFees"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCollectedFees"
  ): TypedContractMethod<[asset: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalFeesPaid"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserFeeRate"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserFeesPaid"
  ): TypedContractMethod<
    [asset: AddressLike, user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "onTransfer"
  ): TypedContractMethod<
    [
      asset: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setBaseFeeRate"
  ): TypedContractMethod<[newRate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTierFeeRate"
  ): TypedContractMethod<
    [tier: BigNumberish, rate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTreasury"
  ): TypedContractMethod<[_treasury: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUserTier"
  ): TypedContractMethod<
    [user: AddressLike, tier: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tierFeeRates"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "userFeesPaid"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "userTiers"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "FeeCollected"
  ): TypedContractEvent<
    FeeCollectedEvent.InputTuple,
    FeeCollectedEvent.OutputTuple,
    FeeCollectedEvent.OutputObject
  >;
  getEvent(
    key: "FeeRateUpdated"
  ): TypedContractEvent<
    FeeRateUpdatedEvent.InputTuple,
    FeeRateUpdatedEvent.OutputTuple,
    FeeRateUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TreasuryUpdated"
  ): TypedContractEvent<
    TreasuryUpdatedEvent.InputTuple,
    TreasuryUpdatedEvent.OutputTuple,
    TreasuryUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "UserTierUpdated"
  ): TypedContractEvent<
    UserTierUpdatedEvent.InputTuple,
    UserTierUpdatedEvent.OutputTuple,
    UserTierUpdatedEvent.OutputObject
  >;

  filters: {
    "FeeCollected(address,address,address,uint256,uint256)": TypedContractEvent<
      FeeCollectedEvent.InputTuple,
      FeeCollectedEvent.OutputTuple,
      FeeCollectedEvent.OutputObject
    >;
    FeeCollected: TypedContractEvent<
      FeeCollectedEvent.InputTuple,
      FeeCollectedEvent.OutputTuple,
      FeeCollectedEvent.OutputObject
    >;

    "FeeRateUpdated(uint256)": TypedContractEvent<
      FeeRateUpdatedEvent.InputTuple,
      FeeRateUpdatedEvent.OutputTuple,
      FeeRateUpdatedEvent.OutputObject
    >;
    FeeRateUpdated: TypedContractEvent<
      FeeRateUpdatedEvent.InputTuple,
      FeeRateUpdatedEvent.OutputTuple,
      FeeRateUpdatedEvent.OutputObject
    >;

    "TreasuryUpdated(address)": TypedContractEvent<
      TreasuryUpdatedEvent.InputTuple,
      TreasuryUpdatedEvent.OutputTuple,
      TreasuryUpdatedEvent.OutputObject
    >;
    TreasuryUpdated: TypedContractEvent<
      TreasuryUpdatedEvent.InputTuple,
      TreasuryUpdatedEvent.OutputTuple,
      TreasuryUpdatedEvent.OutputObject
    >;

    "UserTierUpdated(address,uint256)": TypedContractEvent<
      UserTierUpdatedEvent.InputTuple,
      UserTierUpdatedEvent.OutputTuple,
      UserTierUpdatedEvent.OutputObject
    >;
    UserTierUpdated: TypedContractEvent<
      UserTierUpdatedEvent.InputTuple,
      UserTierUpdatedEvent.OutputTuple,
      UserTierUpdatedEvent.OutputObject
    >;
  };
}
