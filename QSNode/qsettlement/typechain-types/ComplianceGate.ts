/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ComplianceGateInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "blacklistAddress"
      | "blacklistedAddresses"
      | "complianceOracle"
      | "dailyLimits"
      | "dailyTransactions"
      | "executeTransfer"
      | "getDailySpent"
      | "getRemainingDailyLimit"
      | "owner"
      | "preTransferCheck"
      | "removeFromBlacklist"
      | "removeFromWhitelist"
      | "setComplianceOracle"
      | "setDailyLimit"
      | "setTransactionLimit"
      | "transactionLimits"
      | "whitelistAddress"
      | "whitelistedAddresses"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddressBlacklisted"
      | "AddressWhitelisted"
      | "ComplianceViolation"
      | "DailyLimitSet"
      | "TransactionLimitSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "blacklistAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistedAddresses",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "complianceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dailyLimits",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "dailyTransactions",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransfer",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDailySpent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRemainingDailyLimit",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "preTransferCheck",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromBlacklist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromWhitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setComplianceOracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDailyLimit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransactionLimit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transactionLimits",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedAddresses",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "blacklistAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blacklistedAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "complianceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dailyLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dailyTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDailySpent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingDailyLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "preTransferCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setComplianceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDailyLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransactionLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactionLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedAddresses",
    data: BytesLike
  ): Result;
}

export namespace AddressBlacklistedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddressWhitelistedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ComplianceViolationEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    code: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    amount: bigint,
    code: bigint
  ];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
    code: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DailyLimitSetEvent {
  export type InputTuple = [account: AddressLike, limit: BigNumberish];
  export type OutputTuple = [account: string, limit: bigint];
  export interface OutputObject {
    account: string;
    limit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionLimitSetEvent {
  export type InputTuple = [account: AddressLike, limit: BigNumberish];
  export type OutputTuple = [account: string, limit: bigint];
  export interface OutputObject {
    account: string;
    limit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ComplianceGate extends BaseContract {
  connect(runner?: ContractRunner | null): ComplianceGate;
  waitForDeployment(): Promise<this>;

  interface: ComplianceGateInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  blacklistAddress: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  blacklistedAddresses: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  complianceOracle: TypedContractMethod<[], [string], "view">;

  dailyLimits: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  dailyTransactions: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  executeTransfer: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getDailySpent: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  getRemainingDailyLimit: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  preTransferCheck: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish, meta: BytesLike],
    [[boolean, bigint] & { allowed: boolean; code: bigint }],
    "view"
  >;

  removeFromBlacklist: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  removeFromWhitelist: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  setComplianceOracle: TypedContractMethod<
    [_oracle: AddressLike],
    [void],
    "nonpayable"
  >;

  setDailyLimit: TypedContractMethod<
    [account: AddressLike, limit: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTransactionLimit: TypedContractMethod<
    [account: AddressLike, limit: BigNumberish],
    [void],
    "nonpayable"
  >;

  transactionLimits: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  whitelistAddress: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  whitelistedAddresses: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "blacklistAddress"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "blacklistedAddresses"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "complianceOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "dailyLimits"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "dailyTransactions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "executeTransfer"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getDailySpent"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRemainingDailyLimit"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "preTransferCheck"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish, meta: BytesLike],
    [[boolean, bigint] & { allowed: boolean; code: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeFromBlacklist"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeFromWhitelist"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setComplianceOracle"
  ): TypedContractMethod<[_oracle: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDailyLimit"
  ): TypedContractMethod<
    [account: AddressLike, limit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTransactionLimit"
  ): TypedContractMethod<
    [account: AddressLike, limit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transactionLimits"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "whitelistAddress"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "whitelistedAddresses"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getEvent(
    key: "AddressBlacklisted"
  ): TypedContractEvent<
    AddressBlacklistedEvent.InputTuple,
    AddressBlacklistedEvent.OutputTuple,
    AddressBlacklistedEvent.OutputObject
  >;
  getEvent(
    key: "AddressWhitelisted"
  ): TypedContractEvent<
    AddressWhitelistedEvent.InputTuple,
    AddressWhitelistedEvent.OutputTuple,
    AddressWhitelistedEvent.OutputObject
  >;
  getEvent(
    key: "ComplianceViolation"
  ): TypedContractEvent<
    ComplianceViolationEvent.InputTuple,
    ComplianceViolationEvent.OutputTuple,
    ComplianceViolationEvent.OutputObject
  >;
  getEvent(
    key: "DailyLimitSet"
  ): TypedContractEvent<
    DailyLimitSetEvent.InputTuple,
    DailyLimitSetEvent.OutputTuple,
    DailyLimitSetEvent.OutputObject
  >;
  getEvent(
    key: "TransactionLimitSet"
  ): TypedContractEvent<
    TransactionLimitSetEvent.InputTuple,
    TransactionLimitSetEvent.OutputTuple,
    TransactionLimitSetEvent.OutputObject
  >;

  filters: {
    "AddressBlacklisted(address)": TypedContractEvent<
      AddressBlacklistedEvent.InputTuple,
      AddressBlacklistedEvent.OutputTuple,
      AddressBlacklistedEvent.OutputObject
    >;
    AddressBlacklisted: TypedContractEvent<
      AddressBlacklistedEvent.InputTuple,
      AddressBlacklistedEvent.OutputTuple,
      AddressBlacklistedEvent.OutputObject
    >;

    "AddressWhitelisted(address)": TypedContractEvent<
      AddressWhitelistedEvent.InputTuple,
      AddressWhitelistedEvent.OutputTuple,
      AddressWhitelistedEvent.OutputObject
    >;
    AddressWhitelisted: TypedContractEvent<
      AddressWhitelistedEvent.InputTuple,
      AddressWhitelistedEvent.OutputTuple,
      AddressWhitelistedEvent.OutputObject
    >;

    "ComplianceViolation(address,address,uint256,uint256)": TypedContractEvent<
      ComplianceViolationEvent.InputTuple,
      ComplianceViolationEvent.OutputTuple,
      ComplianceViolationEvent.OutputObject
    >;
    ComplianceViolation: TypedContractEvent<
      ComplianceViolationEvent.InputTuple,
      ComplianceViolationEvent.OutputTuple,
      ComplianceViolationEvent.OutputObject
    >;

    "DailyLimitSet(address,uint256)": TypedContractEvent<
      DailyLimitSetEvent.InputTuple,
      DailyLimitSetEvent.OutputTuple,
      DailyLimitSetEvent.OutputObject
    >;
    DailyLimitSet: TypedContractEvent<
      DailyLimitSetEvent.InputTuple,
      DailyLimitSetEvent.OutputTuple,
      DailyLimitSetEvent.OutputObject
    >;

    "TransactionLimitSet(address,uint256)": TypedContractEvent<
      TransactionLimitSetEvent.InputTuple,
      TransactionLimitSetEvent.OutputTuple,
      TransactionLimitSetEvent.OutputObject
    >;
    TransactionLimitSet: TypedContractEvent<
      TransactionLimitSetEvent.InputTuple,
      TransactionLimitSetEvent.OutputTuple,
      TransactionLimitSetEvent.OutputObject
    >;
  };
}
