/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ReserveRegistry {
  export type ReserveDataStruct = {
    totalReserves: BigNumberish;
    tokenSupply: BigNumberish;
    lastAttestationTime: BigNumberish;
    merkleRoot: BytesLike;
    isActive: boolean;
    metadata: string;
  };

  export type ReserveDataStructOutput = [
    totalReserves: bigint,
    tokenSupply: bigint,
    lastAttestationTime: bigint,
    merkleRoot: string,
    isActive: boolean,
    metadata: string
  ] & {
    totalReserves: bigint;
    tokenSupply: bigint;
    lastAttestationTime: bigint;
    merkleRoot: string;
    isActive: boolean;
    metadata: string;
  };
}

export interface ReserveRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "attestReserves"
      | "attestedRoots"
      | "deactivateReserve"
      | "getActiveCurrencies"
      | "getReserveData"
      | "getReserveRatio"
      | "isAttestedRoot"
      | "isReserveHealthy"
      | "oracle"
      | "owner"
      | "reserves"
      | "setOracle"
      | "updateReserves"
      | "verifyMerkleProof"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OracleUpdated"
      | "ReserveAttested"
      | "ReserveDeactivated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "attestReserves",
    values: [string, BigNumberish, BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "attestedRoots",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateReserve",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveCurrencies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveRatio",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAttestedRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isReserveHealthy",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "reserves", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setOracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReserves",
    values: [string, BigNumberish, BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyMerkleProof",
    values: [string, BytesLike, BytesLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "attestReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "attestedRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveCurrencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAttestedRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isReserveHealthy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reserves", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyMerkleProof",
    data: BytesLike
  ): Result;
}

export namespace OracleUpdatedEvent {
  export type InputTuple = [newOracle: AddressLike];
  export type OutputTuple = [newOracle: string];
  export interface OutputObject {
    newOracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReserveAttestedEvent {
  export type InputTuple = [
    currency: string,
    reserves: BigNumberish,
    supply: BigNumberish,
    merkleRoot: BytesLike
  ];
  export type OutputTuple = [
    currency: string,
    reserves: bigint,
    supply: bigint,
    merkleRoot: string
  ];
  export interface OutputObject {
    currency: string;
    reserves: bigint;
    supply: bigint;
    merkleRoot: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReserveDeactivatedEvent {
  export type InputTuple = [currency: string];
  export type OutputTuple = [currency: string];
  export interface OutputObject {
    currency: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ReserveRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): ReserveRegistry;
  waitForDeployment(): Promise<this>;

  interface: ReserveRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  attestReserves: TypedContractMethod<
    [
      currency: string,
      totalReserves: BigNumberish,
      tokenSupply: BigNumberish,
      merkleRoot: BytesLike,
      metadata: string
    ],
    [void],
    "nonpayable"
  >;

  attestedRoots: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  deactivateReserve: TypedContractMethod<
    [currency: string],
    [void],
    "nonpayable"
  >;

  getActiveCurrencies: TypedContractMethod<[], [string[]], "view">;

  getReserveData: TypedContractMethod<
    [currency: string],
    [ReserveRegistry.ReserveDataStructOutput],
    "view"
  >;

  getReserveRatio: TypedContractMethod<[currency: string], [bigint], "view">;

  isAttestedRoot: TypedContractMethod<[root: BytesLike], [boolean], "view">;

  isReserveHealthy: TypedContractMethod<[currency: string], [boolean], "view">;

  oracle: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  reserves: TypedContractMethod<
    [arg0: string],
    [
      [bigint, bigint, bigint, string, boolean, string] & {
        totalReserves: bigint;
        tokenSupply: bigint;
        lastAttestationTime: bigint;
        merkleRoot: string;
        isActive: boolean;
        metadata: string;
      }
    ],
    "view"
  >;

  setOracle: TypedContractMethod<[_oracle: AddressLike], [void], "nonpayable">;

  updateReserves: TypedContractMethod<
    [
      currency: string,
      totalReserves: BigNumberish,
      tokenSupply: BigNumberish,
      merkleRoot: BytesLike,
      metadata: string
    ],
    [void],
    "nonpayable"
  >;

  verifyMerkleProof: TypedContractMethod<
    [currency: string, leaf: BytesLike, proof: BytesLike[]],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "attestReserves"
  ): TypedContractMethod<
    [
      currency: string,
      totalReserves: BigNumberish,
      tokenSupply: BigNumberish,
      merkleRoot: BytesLike,
      metadata: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "attestedRoots"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "deactivateReserve"
  ): TypedContractMethod<[currency: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getActiveCurrencies"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getReserveData"
  ): TypedContractMethod<
    [currency: string],
    [ReserveRegistry.ReserveDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReserveRatio"
  ): TypedContractMethod<[currency: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "isAttestedRoot"
  ): TypedContractMethod<[root: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isReserveHealthy"
  ): TypedContractMethod<[currency: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "oracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "reserves"
  ): TypedContractMethod<
    [arg0: string],
    [
      [bigint, bigint, bigint, string, boolean, string] & {
        totalReserves: bigint;
        tokenSupply: bigint;
        lastAttestationTime: bigint;
        merkleRoot: string;
        isActive: boolean;
        metadata: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setOracle"
  ): TypedContractMethod<[_oracle: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateReserves"
  ): TypedContractMethod<
    [
      currency: string,
      totalReserves: BigNumberish,
      tokenSupply: BigNumberish,
      merkleRoot: BytesLike,
      metadata: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyMerkleProof"
  ): TypedContractMethod<
    [currency: string, leaf: BytesLike, proof: BytesLike[]],
    [boolean],
    "view"
  >;

  getEvent(
    key: "OracleUpdated"
  ): TypedContractEvent<
    OracleUpdatedEvent.InputTuple,
    OracleUpdatedEvent.OutputTuple,
    OracleUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ReserveAttested"
  ): TypedContractEvent<
    ReserveAttestedEvent.InputTuple,
    ReserveAttestedEvent.OutputTuple,
    ReserveAttestedEvent.OutputObject
  >;
  getEvent(
    key: "ReserveDeactivated"
  ): TypedContractEvent<
    ReserveDeactivatedEvent.InputTuple,
    ReserveDeactivatedEvent.OutputTuple,
    ReserveDeactivatedEvent.OutputObject
  >;

  filters: {
    "OracleUpdated(address)": TypedContractEvent<
      OracleUpdatedEvent.InputTuple,
      OracleUpdatedEvent.OutputTuple,
      OracleUpdatedEvent.OutputObject
    >;
    OracleUpdated: TypedContractEvent<
      OracleUpdatedEvent.InputTuple,
      OracleUpdatedEvent.OutputTuple,
      OracleUpdatedEvent.OutputObject
    >;

    "ReserveAttested(string,uint256,uint256,bytes32)": TypedContractEvent<
      ReserveAttestedEvent.InputTuple,
      ReserveAttestedEvent.OutputTuple,
      ReserveAttestedEvent.OutputObject
    >;
    ReserveAttested: TypedContractEvent<
      ReserveAttestedEvent.InputTuple,
      ReserveAttestedEvent.OutputTuple,
      ReserveAttestedEvent.OutputObject
    >;

    "ReserveDeactivated(string)": TypedContractEvent<
      ReserveDeactivatedEvent.InputTuple,
      ReserveDeactivatedEvent.OutputTuple,
      ReserveDeactivatedEvent.OutputObject
    >;
    ReserveDeactivated: TypedContractEvent<
      ReserveDeactivatedEvent.InputTuple,
      ReserveDeactivatedEvent.OutputTuple,
      ReserveDeactivatedEvent.OutputObject
    >;
  };
}
